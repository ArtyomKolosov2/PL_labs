Файл task1.py

# Программа проверяет возможность сущ. степени
#
# Version: 1.0
# Group: 10701219
# Author: Колосов Артём Александрович
# Date: 16.3.2020


def check_power_recursion(num, n):
    if num == n or n == 1:
        return 1
    if num < n:
        return 0

    return check_power_recursion(num / n, n)


def check_power_iter(num, n):
    result = 0
    for i in range(num, 0, -n):
        if i == n:
            result = 1
            break
    return result

num = 8
n = 2
if check_power_recursion(num, n):
    print("{0} - is a power of {1}".format(num, n))
print("Iteration way".center(25, "-"))
if check_power_iter(num, n):
    print("{0} - is a power of {1}".format(num, n))
input("Press Enter")


Файл task2.py

# Программа находит сумму всех чисел
#
# Version: 1.0
# Group: 10701219
# Author: Колосов Артём Александрович
# Date: 16.3.2020


def sum_of_num_recursion(number):
    if number == 0:
        return 0
    summa = number % 10
    return summa + sum_of_num_recursion(number // 10)


def sum_of_num_iter(number):
    if number == 0:
        return 0
    summa = 0
    while number:
        summa += number % 10
        number //= 10
    return summa

n = 123
print("Sum of numbers {0} = {1}".format(n, sum_of_num_recursion(n)))
print("Iteration way".center(25, "-"))
print("Sum of numbers {0} = {1}".format(n, sum_of_num_iter(n)))


Файл task3.py

# Программа внаходи сумму элементов списка
#
# Version: 1.0
# Group: 10701219
# Author: Колосов Артём Александрович
# Date: 16.3.2020
def sum_of_elements_rec(nums):
    if not isinstance(nums, list) or not nums:
        return 0
    return nums.pop(len(nums) - 1) + sum_of_elements_rec(nums)


def sum_of_elements_iter(nums):
    if not isinstance(nums, list) or not nums:
        return None
    summa = 0
    
    for num in nums:
        summa += num
    return summa

n = [1,2,5]
print(n)
print("Sum of numbers = {0}".format(sum_of_elements_rec(n[:])))
print("Iteration way".center(25, "-"))
print("Sum of numbers = {0}".format(sum_of_elements_iter(n)))
input()


Файл task4.py

# Программа разворачивает список
#
# Version: 1.0
# Group: 10701219
# Author: Колосов Артём Александрович
# Date: 16.3.2020

def reverse_elements_recursion(nums):
    if not isinstance(nums, list) or not nums:
        return []
    return [nums[-1]] + reverse_elements_recursion(nums[:-1])


def reverse_elements_iter(nums):
    if not isinstance(nums, list) or not nums:
        return []
    for i in range(len(nums) // 2):
        nums[i], nums[-i - 1] = nums[-i - 1], nums[i]
    return nums


n = [1, 2, 3, 4]
print(reverse_elements_recursion(n))
print("Iteration way".center(25, "-"))
print(reverse_elements_iter(n))
input()


Файл task5.py

# Программа вычесляет x^n/n!
#
# Version: 1.0
# Group: 10701219
# Author: Колосов Артём Александрович
# Date: 16.3.2020


def fact_recursion(n=0):
    if n == 0:
        return 1
    return n * fact_recursion(n - 1)


def fact_iter(n):
    fact = 1
    for i in range(n, 0, -1):
        fact *= i
    return fact


def pow_rec(x, n):
    if n == 0:
        return 1
    return x * pow_rec(x, n - 1)


def pow_iter(x, n):
    num = x
    for i in range(1, n):
        x *= num
    return x


def pow_fact_rec(x, n):
    return pow_rec(x, n) / fact_recursion(n)


def pow_fact_iter(x, n):
    return pow_iter(x, n) / fact_iter(n)

x = 2
n = 8
print("{0}^{1}/!{1} = {2}".format(x, n, pow_fact_rec(x, n)))
print("Iteration way".center(25, "-"))
print("{0}^{1}/!{1} = {2}".format(x, n, pow_fact_iter(x, n)))
input()


Файл task6.py

# Программа вычесляет элементы фибоначи
#
# Version: 1.0
# Group: 10701219
# Author: Колосов Артём Александрович
# Date: 16.3.2020

def get_input(msg):
    return input(msg)


def fibonachi_rec(n, k=1):
    if n == 1 or n == 2 or n == k:
        return 1
    return fibonachi_rec(n - 1) + fibonachi_rec(n - 2)


def fibonachi_elem(n):
    a = 0
    b = 1
    i = 0
    while i < n:
        c = a
        a = b
        b += c
        i += 1
    return c


def output_to_user(msg="", s="", e="\n"):
    print(msg, sep=s, end=e)


def all_fib(n, k=1):
    for i in range(k, n + 1):
        output_to_user(fibonachi_elem(i), e=" ")
    output_to_user()


def build_to_int(var):
    if not isinstance(var, str) or not var.isdigit():
        return None
    return int(var)


def main():
    while True:
        task = get_input("Input command\n"
                         "1 - Output one element\n"
                         "2 - Output to the specified element\n"
                         "3 - Output part of sequence\n"
                         "4 - Exit\n")
        if task == "1":
            n = build_to_int(get_input("Input number of element: "))
            if n:
                all_fib(n, n)

        elif task == "2":
            n = build_to_int(get_input("Input number of element: "))
            if n:
                all_fib(n)

        elif task == "3":
            k = build_to_int(get_input("Input Start: "))
            n = build_to_int(get_input("Input End: "))
            if n and k:
                all_fib(n, k)
        elif task == "4":
            break


if __name__ == "__main__":
    main()


