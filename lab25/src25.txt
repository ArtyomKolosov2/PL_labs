Файл task_decode.py

# Программа расшифровывет закодированное сообщение из файла
#
# Version: 1.0
# Group: 10701219
# Author: Колосов Артём Александрович
# Date: 16.4.2020

def decrypt_сaesar(message, shift=1):
    if not isinstance(message, str):
        return None
    alpha_lower = [chr(i) for i in range(ord('a'), ord('z') + 1)]
    alpha_upper = [chr(i) for i in range(ord('A'), ord('Z') + 1)]
    result = ""
    for symbol in message:
        try:
            if symbol in alpha_lower:
                ind = alpha_lower.index(symbol)
                step = ind - shift
                result += alpha_lower[step]
            elif symbol in alpha_upper:
                ind = alpha_upper.index(symbol)
                step = ind - shift
                result += alpha_upper[step]
            else:
                result += symbol
        except IndexError as msg:
            print(msg)
            break
    return result


def find_slice_len(text):
    if not isinstance(text, str):
        return None
    min_index = 0
    minimum = ord(text[0])
    for i in range(len(text)):
        if minimum > ord(text[i]):
            min_index = i
            minimum = ord(text[i])
    return len(text[min_index:])


def decode_additional(decrypt, slice_len):
    if not (isinstance(decrypt, list) and isinstance(slice_len, int)):
        return None
    encrypted_dot_symbol = '/'
    for i in range(len(decrypt)):
        if len(decrypt[i]) > slice_len:
            res = len(decrypt[i]) - slice_len
            decrypt[i] = decrypt[i][res:len(decrypt[i])] + decrypt[i][0:res]
        else:
            res = -slice_len % len(decrypt[i])
            decrypt[i] = decrypt[i][res:] + decrypt[i][0:res]
        if encrypted_dot_symbol in decrypt[i]:
            slice_len += 1


def main():
    path = r"important.txt"
    try:
        file = open(path, "r")
    except FileNotFoundError:
        print("Error: File ", path, " NotFound")

    text = file.read()
    decrypt = decrypt_сaesar(text, 1).split()
    print(" ".join(decrypt))

    slice_len = find_slice_len(decrypt[0])
    decode_additional(decrypt, slice_len)
    decrypt = ' '.join(decrypt)

    replace_dict = {'(': '\'',
                    '/': '.\n',
                    '"': '!', 
                    '+': '"'}
    print("="*70)
    for key in replace_dict.keys():
        decrypt = decrypt.replace(key, replace_dict[key])
    print(decrypt)


if __name__ == "__main__":
    main()


Файл task_delete_coments.py

# Программа удаляет комментарии из кода Python
#
# Version: 1.0
# Group: 10701219
# Author: Колосов Артём Александрович
# Date: 16.4.2020

def delete_comments_safe_way(code_lines):
    if not isinstance(code_lines, list):
        return None
    for i in range(len(code_lines)):
        if isinstance(code_lines[i], str):
            flag = False
            prom = list(code_lines[i])
            for j in range(len(prom)):
                if prom[j] == '#':
                    flag = True
                if flag and prom[j] != '\n':
                    prom[j] = ''
            code_lines[i] = "".join(prom)


def delete_comments_faster_way(code_lines):
    if not isinstance(code_lines, list):
        return None

    for i in range(len(code_lines)):
        if isinstance(code_lines[i], str):
            flag = False
            prom = list(code_lines[i])
            start_index = 0
            for j in range(len(code_lines[i])):
                if prom[j] == '#':
                    flag = True
                    start_index = j
                    break
            if flag:
                code_lines[i] = code_lines[i][0:start_index] + '\n'


def main():
    path_in = r"code.in.txt"
    path_out = r"code.out.txt"
    try:
        file = open(path_in, "r")
    except FileNotFoundError:
        print("Error: FileNotFound!")
        exit(1)

    print("1 - Safe Mode\n"
          "2 - Fast Mode")
    command = input("Choose Delete Mode: ")
    all_lines = file.readlines()
    file.close()
    if command == "1":
        delete_comments_safe_way(all_lines)
    elif command == "2":
        delete_comments_faster_way(all_lines)

    new_file = open(path_out, "w")

    new_file.writelines(all_lines)
    new_file.close()


if __name__ == "__main__":
    main()


Файл task_main.py

# Программа Подсчитывает кол-во повторений
# Каждого слова в тексте, и выводит результаты
# в новый файл
#
# Version: 1.0
# Group: 10701219
# Author: Колосов Артём Александрович
# Date: 16.4.2020

def output_to_user(msg, s=' ', e='\n'):
    print(msg, sep=s, end=e)


def isalpha_mod(string):
    result = False
    if isinstance(string, str):
        result = str.isalpha(string) or string == "’" or string == "'"
    return result


def find_element(words, string):
    result = False
    if isinstance(words, list) and isinstance(string, str):
        for word in words:
            if word[1] == string:
                result = True
                break
    return result


def get_words(text):
    if not isinstance(text, str):
        return None
    all_words = []
    time_text = []
    flag = False
    for symbol in text:
        if isalpha_mod(symbol):
            time_text.append(symbol)
            flag = True
        elif flag:
            all_words.append([0, "".join(time_text)])
            time_text.clear()
            flag = False
    return all_words


def count_words_repetation(words):
    if not isinstance(words, list):
        return None
    for i in range(len(words)):
        count = 0
        for j in range(len(words)):
            if words[j][1] == words[i][1]:
                count += 1
        words[i][0] = count
    words.sort()


def get_words_one_repetation(words):
    if not isinstance(words, list):
        return None
    words_repetation = []
    for i in range(len(words)):
        if not find_element(words_repetation, words[i][1]):
            words_repetation.append(words[i])

    return words_repetation


def main():
    try:
        path = r"C:\Users\User\Downloads\lab25_1_in.txt"
        file = open(path, "r")
    except FileNotFoundError:
        output_to_user("Error: Файл не найден!")
        exit(1)

    text = file.read()
    text_words = get_words(text)
    count_words_repetation(text_words)
    new_file = open("out.txt", "w")
    repet = get_words_one_repetation(text_words)
    for i in range(0, len(repet)):
        new_file.write("{0} - {1}\n".format(repet[i][1], repet[i][0]))
    new_file.close()


if __name__ == "__main__":
    main()


Файл task_oaip_5.py

# Программа подсчитывает кол-во символов в диапазоне от 'g' до 'o'
# Подсчитывает кол-во каждого символа в тексте
# Находит предложения, разделённые с двух сторон запятыми и
# Сортирует их по алфавиту
# Считает кол-во слов, разделённых с двух сторон пробелами
# Version: 1.0
# Group: 10701219
# Author: Колосов Артём Александрович
# Date: 16.4.2020

def output_to_user(msg, s=' ', e='\n'):
    print(msg, sep=s, end=e)


def count_symbol_codes(string, symb_one='g', symb_two='o'):
    if not (isinstance(string, str) and  isinstance(symb_one, str) or  isinstance(symb_two, str)):
        return None
    count = 0
    first_code = ord(symb_one)
    second_code = ord(symb_two)
    for symbol in string:
        if first_code <= ord(symbol) <= second_code:
            count += 1
    return count


def count_symbol_alternate(string, symbol_one='g', symbol_two='o', key=lambda s: s):
    if not (isinstance(string, str) and isinstance(symbol_one, str) and isinstance(symbol_two, str)):
        return None
    first_code = ord(key(symbol_one))
    second_code = ord(key(symbol_two))
    for code in range(first_code, second_code + 1):
        output_to_user("Symbol {0} : {1}".format(chr(code), string.count(key(chr(code)))))


def selection_sort(text):
    if not isinstance(text, list):
        return None
    index = 0
    for i in range(len(text) - 1):
        index = i
        for j in range(i + 1, len(text)):
            if strcmp(text[j], text[index]) < 0:
                index = j
        if index != i:
            text[i], text[index] = text[index], text[i]

    return text


def strcmp(str1, str2):
    if not (isinstance(str1, str) and isinstance(str2, str)):
        return None
    smallest_len = len(str1) if len(str1) <= len(str2) else len(str2)
    return_code = 0
    str1 = str1.strip()
    str2 = str2.strip()
    for i in range(0, smallest_len):
        if str1[i] != str2[i]:
            return_code = 1 if ord(str1[i]) > ord(str2[i]) else -1
            break
    return return_code


def count_spaces(my_text):
    if not isinstance(my_text, str):
        return None
    count = 0
    for i in range(len(my_text)):
        if my_text[i].isspace():
            flag = False
            for j in range(i + 1, len(my_text)):
                if my_text[j].isalpha():
                    flag = True
                elif my_text[j].isspace():
                    if flag:
                        count += 1
                        i += j
                    break
                elif my_text[j] in (",", ".", "?", ":", ";", "/"):
                    i += j
                    break
    return count


def main():
    split_symbol = '+'
    try:
        file = open("oaip_file.txt", "r")
        info = file.read().split(split_symbol)
        phrase = info[0]
        text = info[1]
        flag = True
    except FileNotFoundError as msg:
        output_to_user("Error:{0}".format(msg))
        input()
        exit(1)
    except IndexError as msg:
        output_to_user("Error:{0}".format(msg))
        input()
        exit(1)
    
    output_to_user("First Task:")
    output_to_user("Your String: {0}".format(phrase))
    count_symbol_alternate(phrase)
    
    output_to_user("="*50)
    
    output_to_user("Second Task:")
    count_symbol_alternate(text, key=lambda s: s.lower(), symbol_one='a', symbol_two='z')
    text = text.replace("\n", "")
    words = text.split(",")
    words = words[1:len(words) - 1]
    output_to_user("="*50)
    output_to_user("Amount of words, separeted by spaces: {0}".format(count_spaces(text)))
    output_to_user("="*50)
    output_to_user("Sorted Words, separated by commas")
    words = selection_sort(words)
    for word in words:
        output_to_user(word)
    input("Press Enter")

if __name__ == "__main__":
    main()


